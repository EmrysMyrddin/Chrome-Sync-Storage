// Generated by CoffeeScript 1.9.0
var AfsStorage, afs,
  __slice = [].slice;

AfsStorage = (function() {
  var IdTabDriver, Session, cloudHost, idStore, initialised, initiating, login, password, updateFromStorage, usingTablet;

  function AfsStorage() {
    this.session = new Session();
    this.idTabDriver = new IdTabDriver();
  }

  updateFromStorage = function(storage, areaName, afsStorage) {
    var firsts, key, last, name, obj, _i, _j, _k, _len, _len1, _ref, _ref1, _ref2, _results;
    if (areaName !== "local") {
      return;
    }
    _ref = Object.keys(storage);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      if (key.contains("afs_")) {
        _ref1 = key.split("_"), firsts = 2 <= _ref1.length ? __slice.call(_ref1, 0, _j = _ref1.length - 1) : (_j = 0, []), last = _ref1[_j++];
        for (_k = 0, _len1 = firsts.length; _k < _len1; _k++) {
          name = firsts[_k];
          if (name === "afs") {
            obj = afsStorage;
          } else {
            obj = obj[name];
          }
        }
        obj[last] = (_ref2 = storage[key].newValue) != null ? _ref2 : storage[key];
        _results.push(null);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  login = "";

  password = "";

  idStore = "";

  cloudHost = "accessfrance.eu/cloud/WS/";

  usingTablet = false;

  initiating = false;

  initialised = false;

  AfsStorage.property("login", {
    set: function(newValue) {
      if (initiating) {
        login = newValue;
        return;
      }
      if (newValue !== login) {
        return chrome.storage.local.set({
          afs_login: newValue
        }, function() {
          return login = newValue;
        });
      }
    },
    get: function() {
      return login;
    }
  });

  AfsStorage.property("password", {
    set: function(newValue) {
      if (initiating) {
        password = newValue;
        return;
      }
      if (newValue !== password) {
        return chrome.storage.local.set({
          afs_password: newValue
        }, function() {
          return password = newValue;
        });
      }
    },
    get: function() {
      return password;
    }
  });

  AfsStorage.property("cloudHost", {
    set: function(newValue) {
      if (initiating) {
        cloudHost = newValue;
        return;
      }
      if (newValue !== cloudHost) {
        return chrome.storage.local.set({
          afs_cloudHost: newValue
        }, function() {
          return cloudHost = newValue;
        });
      }
    },
    get: function() {
      return cloudHost;
    }
  });

  AfsStorage.property("idStore", {
    set: function(newValue) {
      if (initiating) {
        idStore = newValue;
        return;
      }
      if (newValue !== idStore) {
        return chrome.storage.local.set({
          afs_idStore: newValue
        }, function() {
          return idStore = newValue;
        });
      }
    },
    get: function() {
      return idStore;
    }
  });

  AfsStorage.property("usingTablet", {
    set: function(newValue) {
      if (initiating) {
        usingTablet = newValue;
        return;
      }
      if (newValue !== usingTablet) {
        return chrome.storage.local.set({
          afs_usingTablet: newValue
        }, function() {
          return usingTablet = newValue;
        });
      }
    },
    get: function() {
      return usingTablet;
    }
  });

  AfsStorage.property("initialized", {
    get: function() {
      return initialised;
    }
  });

  AfsStorage.prototype.init = function() {
    return (function(afsStorage) {
      initiating = true;
      chrome.storage.local.get(function(storage) {
        updateFromStorage(storage, "local", afsStorage);
        initiating = false;
        return initialised = true;
      });
      return chrome.storage.onChanged.addListener(function(changes, areaName) {
        return updateFromStorage(changes, areaName, afsStorage);
      });
    })(this);
  };

  Session = (function() {
    var expiration, token;

    function Session() {}

    token = "";

    expiration = 0;

    Session.property("token", {
      set: function(newValue) {
        if (initiating) {
          token = newValue;
          return;
        }
        if (newValue !== token) {
          return chrome.storage.local.set({
            afs_session_token: newValue
          }, function() {
            return token = newValue;
          });
        }
      },
      get: function() {
        return token;
      }
    });

    Session.property("expiration", {
      set: function(newValue) {
        if (initiating) {
          expiration = newValue;
          return;
        }
        if (newValue !== expiration) {
          return chrome.storage.local.set({
            afs_session_expiration: newValue
          }, function() {
            return expiration = newValue;
          });
        }
      },
      get: function() {
        return expiration;
      }
    });

    return Session;

  })();

  IdTabDriver = (function() {
    var host, port;

    function IdTabDriver() {}

    host = "localhost";

    port = 44360;

    IdTabDriver.property("host", {
      set: function(newValue) {
        if (initiating) {
          host = newValue;
          return;
        }
        if (newValue !== host) {
          return chrome.storage.local.set({
            afs_idTabDriver_host: newValue
          }, function() {
            return host = newValue;
          });
        }
      },
      get: function() {
        return host;
      }
    });

    IdTabDriver.property("port", {
      set: function(newValue) {
        if (initiating) {
          port = newValue;
          return;
        }
        if (newValue !== port) {
          return chrome.storage.local.set({
            afs_idTabDriver_port: newValue
          }, function() {
            return port = newValue;
          });
        }
      },
      get: function() {
        return port;
      }
    });

    return IdTabDriver;

  })();

  return AfsStorage;

})();

afs = new AfsStorage();

afs.init();

//# sourceMappingURL=storage.js.map
